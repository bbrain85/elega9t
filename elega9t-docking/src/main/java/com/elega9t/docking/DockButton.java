/*
 * Copyright (c) 2011 - 2012. Elega9t Ltd. All rights reserved.
 * ELEGA9T PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.Copyright (c) 2011 - 2012. Elega9t Ltd. All rights reserved.
 */

package com.elega9t.docking;

import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;

public class DockButton extends javax.swing.JPanel implements MouseListener {

    protected static final Border EMPTY_BORDER = javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0);
    protected static final Border  LINE_BORDER = javax.swing.BorderFactory.createLineBorder(Color.GRAY, 1);
    protected static final Border BEVEL_BORDER = javax.swing.BorderFactory.createBevelBorder(BevelBorder.LOWERED);

    protected final DockLocation location;

    protected int inset = 5;
    protected boolean selected;

    protected java.util.List<ActionListener> actionListeners = new ArrayList<ActionListener>();

    public DockButton(DockLocation location) {
        this(location, null);
    }

    public DockButton(DockLocation location, String text) {
        this(location, text, null);
    }

    public DockButton(DockLocation location, String text, Icon icon) {
        this(location, text, icon, null);
    }

    public DockButton(DockLocation location, String text, Icon icon, Icon disabledIcon) {
        this.location = location;
        initComponents();
        textLabel.setText(text);
        textLabel.setIcon(icon);
        textLabel.setDisabledIcon(disabledIcon);
        addMouseListener(this);
    }

    @Override
    public Dimension getPreferredSize() {
        return getMaximumSize();
    }

    @Override
    public Dimension getMaximumSize() {
        Dimension minimumSize = textLabel.getPreferredSize();
        return new Dimension(minimumSize.width + 2 + inset, minimumSize.height + 2 + inset);
    }

    @Override
    public Dimension getMinimumSize() {
        return getMaximumSize();
    }

    @Override
    public Dimension getSize() {
        return getMinimumSize();
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textLabel = new RotatedLabel(location);

        setBorder(EMPTY_BORDER);
        setLayout(new java.awt.BorderLayout());

        textLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(textLabel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel textLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent me) {
        selected = !selected;
        if(selected) {
            setBorder(BEVEL_BORDER);
            new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    wait(500);
                    return null;
                }
                @Override
                protected void done() {
                    setBorder(LINE_BORDER);
                }
            }.execute();
        } else {
            setBorder(LINE_BORDER);
        }
        fireActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "selection"));
    }

    public void fireActionPerformed(ActionEvent event) {
        for (ActionListener actionListener : actionListeners) {
            actionListener.actionPerformed(event);
        }
    }

    public void addActionListener(ActionListener actionListener) {
        this.actionListeners.add(actionListener);
    }

    public boolean removeActionListener(ActionListener actionListener) {
        return this.actionListeners.remove(actionListener);
    }

    @Override
    public void mousePressed(MouseEvent me) {
        setBorder(BEVEL_BORDER);
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        setBorder(LINE_BORDER);
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        setBorder(LINE_BORDER);
    }

    @Override
    public void mouseExited(MouseEvent me) {
        setBorder(EMPTY_BORDER);
    }

    public boolean isSelected() {
        return selected;
    }

    public void setSelected(boolean selected) {
        this.selected = selected;
        if(selected) {
            setBorder(BEVEL_BORDER);
        } else {
            setBorder(EMPTY_BORDER);
        }
    }

    @Override
    public void setEnabled(boolean enabled) {
        textLabel.setEnabled(enabled);
    }

}
