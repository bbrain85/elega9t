package com.elega9t.gui.platform.dock;

import com.elega9t.commons.entity.GuiEntity;

import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;

public class DockButton extends javax.swing.JPanel implements GuiEntity, MouseListener {

    private static final Border EMPTY_BORDER = javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0);
    private static final Border  LINE_BORDER = javax.swing.BorderFactory.createLineBorder(Color.GRAY, 1);
    private static final Border BEVEL_BORDER = javax.swing.BorderFactory.createBevelBorder(BevelBorder.LOWERED);

    private boolean state;
    private Icon icon;
    private DockLocation location;
    private String text;
    private int inset = 3;

    private boolean mouseOver;

    /**
     * Creates new form DockButton
     */
    public DockButton(DockLocation location) {
        this(location, null);
    }

    /**
     * Creates new form DockButton
     */
    public DockButton(DockLocation location, String text) {
        this(location, text, null);
    }

    /**
     * Creates new form DockButton
     */
    public DockButton(DockLocation location, String text, Icon icon) {
        this.location = location;
        this.text = text;
        this.icon = icon;
        initComponents();
        setFont(new Font(getFont().getFontName(), Font.PLAIN, getFont().getSize() - 2));
        addMouseListener(this);
    }

    @Override
    public Dimension getPreferredSize() {
        return getSize();
    }

    @Override
    public Dimension getMaximumSize() {
        return getSize();
    }

    @Override
    public Dimension getMinimumSize() {
        return getSize();
    }

    @Override
    public Dimension getSize() {
        if(text != null) {
            Graphics graphics = getGraphics();
            Rectangle2D bounds = graphics.getFontMetrics().getStringBounds(text, graphics);
            int height = (int) bounds.getHeight();
            int width = (int) bounds.getWidth();
            int twiceInset = inset * 2;
            return new Dimension(height + twiceInset, width + twiceInset);
        }
        return new Dimension(0, 0);
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(EMPTY_BORDER);
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent me) {
        state = !state;
        if(state) {
            setBorder(BEVEL_BORDER);
        } else {
            setBorder(LINE_BORDER);
        }
    }

    @Override
    public void mousePressed(MouseEvent me) {
    }

    @Override
    public void mouseReleased(MouseEvent me) {
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        if(!state) {
            setBorder(LINE_BORDER);
        }
    }

    @Override
    public void mouseExited(MouseEvent me) {
        if(!state) {
            setBorder(EMPTY_BORDER);
        }
    }

    @Override
    public void setIcon(Icon icon) {
        this.icon = icon;
    }

    @Override
    public Icon getIcon() {
        return icon;
    }

    @Override
    protected void paintChildren(Graphics graphics) {
        graphics = getGraphics();
        if(text != null) {
            Graphics2D graphics2d = (Graphics2D) graphics;
            if(location != DockLocation.BOTTOM) {
                AffineTransform at = new AffineTransform();
                double angle = Math.PI / 2.0;
                if(location == DockLocation.LEFT) {
                    angle *= -1;
                }
                at.setToRotation(angle, getWidth() / 2.0, getHeight() / 2.0);
                graphics2d.setTransform(at);
            }
            graphics2d.drawString(text, inset + (location == DockLocation.LEFT ? 1 : 0), getWidth() - inset - 2);
        }
    }

}
