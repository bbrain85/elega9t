options {
    JDK_VERSION = "1.7";
    IGNORE_CASE = true;
    STATIC = false;
    DEBUG_TOKEN_MANAGER = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(ArgumentParser)
/*
 * Copyright (c) 2011 - 2012. Elega9t Ltd. All rights reserved.
 * ELEGA9T PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.elega9t.commons.args;

import java.util.Map;
import java.util.LinkedHashMap;

import com.elega9t.commons.args.Parameter;
import com.elega9t.commons.args.NamedParameter;
import com.elega9t.commons.args.DuplicateParameterException;

public class ArgumentParser {

  final static String NL = System.getProperty("line.separator");

  private static String getTokenText(Token first, Token cur) {
    Token t;
    StringBuffer sb = new StringBuffer();

    for (t=first; t != cur.next; t = t.next) {
      if (t.specialToken != null) {
        Token tt=t.specialToken;
        while (tt.specialToken != null)
          tt = tt.specialToken;
        for (; tt != null; tt = tt.next)
          sb.append(tt.image);
      };
      sb.append(t.image);
    };
    return sb.toString();
  }

}

PARSER_END(ArgumentParser)

<*> SKIP: {
  " " | "\t"
  {
  System.err.println("Skipping");
  }
}

<*> TOKEN : {
  <ALPHA_CHAR       : ["a"-"z", "A"-"Z"] >
| <NUM_CHAR         : ["0"-"9"] >
| <ALPHANUM_CHAR    : [ "a"-"z", "A"-"Z", "0"-"9" ] >
| <VALUE_STRING_NB : ( ~["-", " ", "\t"] ( ~["\r", "\n", " ", "\t"] )* ) >
| <SINGLE_QUOTED_STRING_NB : ( "'" ( ~["'", "\r", "\n"] )* "'" ) >
| <DOUBLE_QUOTED_STRING_NB : ( "\"" ( ~["\"", "\r", "\n"] )* "\"" ) >
| <WHITESPACE       : ( " " | "\t" ) >
| <OPTION_PREFIX    : ( "-" ) >
}

Map<String, Parameter> parse() :
{
    Map<String, Parameter> parameters = new LinkedHashMap<String, Parameter>();
    Parameter parameter;
    int unnamedParameterCount = 0;
}
{
    ( parameter = nextParameter()
        {
            if(parameter instanceof NamedParameter) {
                if (parameters.containsKey(((NamedParameter)parameter).getName())) {
                    throw new DuplicateParameterException(((NamedParameter)parameter).getName());
                } else {
                    parameters.put(((NamedParameter)parameter).getName(), parameter);
                }
            } else {
                parameters.put(unnamedParameterCount+"", parameter);
                unnamedParameterCount++;
            }
        }
    )* <EOF>
    {
        return parameters;
    }
}

Parameter nextParameter() :
{
    Parameter parameter;
}
{
    ((
        <OPTION_PREFIX><VALUE_STRING_NB>
        {
            parameter = new NamedParameter(token.toString());
        }
        ( LOOKAHEAD(2) ( <VALUE_STRING_NB> | <SINGLE_QUOTED_STRING_NB> | <DOUBLE_QUOTED_STRING_NB> ) { parameter.setValue(token.toString()); } )?
    )
    |
    (
        ( <VALUE_STRING_NB> | <SINGLE_QUOTED_STRING_NB> | <DOUBLE_QUOTED_STRING_NB> )
        {
            parameter = new Parameter();
            parameter.setValue(token.toString());
        }
    ))
    {
            return parameter;
    }
}
