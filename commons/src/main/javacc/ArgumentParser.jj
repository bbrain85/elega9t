options {
    JDK_VERSION = "1.7";
    IGNORE_CASE = true;
    STATIC = false;
    DEBUG_TOKEN_MANAGER = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(ArgumentParser)
/*
 * Copyright (c) 2011 - 2012. Elega9t Ltd. All rights reserved.
 * ELEGA9T PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package com.elega9t.commons.args;

import java.util.Map;
import java.util.LinkedHashMap;

import com.elega9t.commons.args.ParsedArgument;
import com.elega9t.commons.args.NamedParsedArgument;
import com.elega9t.commons.args.DuplicateArgumentException;

public class ArgumentParser {
}

PARSER_END(ArgumentParser)

<*> SKIP: {
  " " | "\t"
  {
  System.err.println("Skipping");
  }
}

<*> TOKEN : {
  <VALUE_STRING_NB : ( ~["-", " ", "\t"] ( ~["\r", "\n", " ", "\t"] )* ) >
| <SINGLE_QUOTED_STRING_NB : ( "'" ( ~["'", "\r", "\n"] )* "'" ) >
| <DOUBLE_QUOTED_STRING_NB : ( "\"" ( ~["\"", "\r", "\n"] )* "\"" ) >
| <WHITESPACE       : ( " " | "\t" ) >
| <OPTION_PREFIX    : ( "-" ) >
}

Map<String, ParsedArgument> parse() :
{
    Map<String, ParsedArgument> arguments = new LinkedHashMap<String, ParsedArgument>();
    ParsedArgument argument;
    int unnamedParameterCount = 0;
}
{
    ( argument = nextParameter()
        {
            if(argument instanceof NamedParsedArgument) {
                if (arguments.containsKey(((NamedParsedArgument)argument).getName())) {
                    throw new DuplicateArgumentException(((NamedParsedArgument)argument).getName());
                } else {
                    arguments.put(((NamedParsedArgument)argument).getName(), argument);
                }
            } else {
                arguments.put(unnamedParameterCount+"", argument);
                unnamedParameterCount++;
            }
        }
    )* <EOF>
    {
        return arguments;
    }
}

ParsedArgument nextParameter() :
{
    ParsedArgument argument;
}
{
    ((
        <OPTION_PREFIX><VALUE_STRING_NB>
        {
            argument = new NamedParsedArgument(token.toString());
        }
        ( LOOKAHEAD(2) ( <VALUE_STRING_NB> | <SINGLE_QUOTED_STRING_NB> | <DOUBLE_QUOTED_STRING_NB> ) { argument.setValue(token.toString()); } )?
    )
    |
    (
        ( <VALUE_STRING_NB> | <SINGLE_QUOTED_STRING_NB> | <DOUBLE_QUOTED_STRING_NB> )
        {
            argument = new ParsedArgument();
            argument.setValue(token.toString());
        }
    ))
    {
            return argument;
    }
}
